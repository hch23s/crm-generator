package ${basePackage}.web.controller.${moduleName};

import java.util.List;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.ruoyi.common.annotation.Log;
import com.ruoyi.common.enums.BusinessType;
import ${basePackage}.domain.${className};
import ${basePackage}.service.I${className}Service;
import com.ruoyi.common.core.controller.BaseController;
import com.ruoyi.common.core.domain.AjaxResult;
import com.ruoyi.common.utils.poi.ExcelUtil;
#if($table.crud)
import com.ruoyi.common.core.page.TableDataInfo;
#elseif($table.tree)
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.core.domain.Ztree;
#end

/**
 * ${comments}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${pathName}")
public class ${className}Controller extends BaseController
{
    private String prefix = "${moduleName}/${pathName}";

    @Autowired
    private I${className}Service ${classname}Service;

    @RequiresPermissions("${pathName}:view")
    @GetMapping()
    public String ${pathName}()
    {
        return prefix + "/${pathName}";
    }

#if($table.tree)
    /**
     * 查询${comments}树列表
     */
    @RequiresPermissions("${pathName}:list")
    @PostMapping("/list")
    @ResponseBody
    public List<${className}> list(${className} ${classname})
    {
        List<${className}> list = ${classname}Service.select${className}List(${classname});
        return list;
    }
#elseif($table.crud)
    /**
     * 查询${comments}列表
     */
    @RequiresPermissions("${pathName}:list")
    @PostMapping("/list")
    @ResponseBody
    public TableDataInfo list(${className} ${classname})
    {
        startPage();
        List<${className}> list = ${classname}Service.select${className}List(${classname});
        return getDataTable(list);
    }
#end

    /**
     * 导出${comments}列表
     */
    @RequiresPermissions("${pathName}:export")
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(${className} ${classname})
    {
        List<${className}> list = ${classname}Service.select${className}List(${classname});
        ExcelUtil<${className}> util = new ExcelUtil<${className}>(${className}.class);
        return util.exportExcel(list, "${pathName}");
    }

#if($table.crud)
    /**
     * 新增${comments}
     */
    @GetMapping("/add")
    public String add()
    {
        return prefix + "/add";
    }
#elseif($table.tree)
    /**
     * 新增${comments}
     */
    @GetMapping(value = { "/add/{${pk.attrname}}", "/add/" })
    public String add(@PathVariable(value = "${pk.attrname}", required = false) Long ${pk.attrname}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pk.attrname}))
        {
            mmap.put("${classname}", ${classname}Service.select${className}ById(${pk.attrname}));
        }
        return prefix + "/add";
    }
#end

    /**
     * 新增保存${comments}
     */
    @RequiresPermissions("${pathName}:add")
    @Log(title = "${comments}", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @ResponseBody
    public AjaxResult addSave(${className} ${classname})
    {
        return toAjax(${classname}Service.insert${className}(${classname}));
    }

    /**
     * 修改${comments}
     */
    @GetMapping("/edit/{${pk.attrname}}")
    public String edit(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}, ModelMap mmap)
    {
        ${className} ${classname} = ${classname}Service.select${className}ById(${pk.attrname});
        mmap.put("${classname}", ${classname});
        return prefix + "/edit";
    }

    /**
     * 修改保存${comments}
     */
    @RequiresPermissions("${pathName}:edit")
    @Log(title = "${comments}", businessType = BusinessType.UPDATE)
    @PostMapping("/edit")
    @ResponseBody
    public AjaxResult editSave(${className} ${classname})
    {
        return toAjax(${classname}Service.update${className}(${classname}));
    }

#if($table.crud)
    /**
     * 删除${comments}
     */
    @RequiresPermissions("${pathName}:remove")
    @Log(title = "${comments}", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(Long ids)
    {
        return toAjax(${classname}Service.delete${className}ByIds(ids));
    }
#elseif($table.tree)
    /**
     * 删除
     */
    @RequiresPermissions("${pathName}:remove")
    @Log(title = "${comments}", businessType = BusinessType.DELETE)
    @GetMapping("/remove/{${pk.attrname}}")
    @ResponseBody
    public AjaxResult remove(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname})
    {
        return toAjax(${classname}Service.delete${className}ById(${pk.attrname}));
    }
#end
#if($table.tree)

    /**
     * 选择${comments}树
     */
#set($pathName=$pathName.substring(0,1).toUpperCase() + ${pathName.substring(1)})
    @GetMapping(value = { "/select${pathName}Tree/{${pk.attrname}}", "/select${pathName}Tree/" })
    public String select${pathName}Tree(@PathVariable(value = "${pk.attrname}", required = false) Long ${pk.attrname}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pk.attrname}))
        {
            mmap.put("${classname}", ${classname}Service.select${className}ById(${pk.attrname}));
        }
        return prefix + "/tree";
    }

    /**
     * 加载${comments}树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData()
    {
        List<Ztree> ztrees = ${classname}Service.select${className}Tree();
        return ztrees;
    }
#end
}
