package ${basePackage}.service.impl;

import java.util.Date;
import java.util.List;

import com.common.utils.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ${basePackage}.mapper.${className}Mapper;
import ${basePackage}.entity.${className};
import ${basePackage}.dto.${className}Dto;
import ${basePackage}.vo.${className}Vo;
import ${basePackage}.service.I${className}Service;

/**
 * ${comments}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl implements I${className}Service {
    @Autowired(required = false)
    private ${className}Mapper ${classname}Mapper;

    /**
     * 查询${comments}
     * 
     * @param ${pk.attrType} ${comments}ID
     * @return ${comments}
     */
    @Override
    public ${className}Dto select${className}ById(${pk.attrType} ${pk.attrname}){
        return ${classname}Mapper.select${className}ById(${pk.attrname});
    }

    /**
     * 查询${comments}列表
     * 
     * @param ${classname} ${comments}
     * @return ${comments}
     */
    @Override
    public List<${className}Dto> select${className}List(${className}Vo ${classname}Vo){
        ${className} ${classname} = new ${className}();
        BeanUtils.copyProperties(${classname}Vo,${classname});
        return ${classname}Mapper.select${className}List(${classname});
    }

    /**
     * 新增/修改${comments}
     * 
     * @param ${classname} ${comments}
     * @return 结果
     */
    @Override
    public int insertAndUpdate${className}(${className}Vo ${classname}Vo){
        ${className} ${classname} = new ${className}();
        BeanUtils.copyProperties(${classname}Vo,${classname});
		int i;
        //当ID不为空就是修改
        if(StringUtils.idNotNull(${classname}.getId())){
            ${classname}.setUpdateBy(1L);
            ${classname}.setUpdateTime(new Date());
            i = ${classname}Mapper.update${className}(${classname});
        }else{
            ${classname}.setCreateBy(1L);
            ${classname}.setCreateTime(new Date());
            i = ${classname}Mapper.insert${className}(${classname});
        }
        return i;
    }

    /**
     * 删除${comments}对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Override
    public int delete${className}ByIds(Long[] ids){
        
        return ids.length == 1?${classname}Mapper.delete${className}ById(ids[0]):
        ${classname}Mapper.delete${className}ByIds(ids);
    }
}
